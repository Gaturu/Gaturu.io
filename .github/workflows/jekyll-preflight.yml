name: Jekyll Preflight Validator

on:
  push:
    paths:
      - "_posts/**.md"
  pull_request:
    paths:
      - "_posts/**.md"

jobs:
  preflight:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: pip install pyyaml

      - name: Run Preflight Checks
        run: |
          import os
          import re
          import yaml
          from pathlib import Path
          from datetime import datetime, timedelta

          post_dir = Path("_posts")
          date_pattern = re.compile(r"^\d{4}-\d{2}-\d{2}( \d{2}:\d{2}:\d{2})?$")
          required_fields = ["title", "date"]
          errors = []
          warnings = []

          for md_file in post_dir.rglob("*.md"):
              try:
                  content = md_file.read_text(encoding="utf-8")
                  parts = content.split("---")
                  if len(parts) < 3:
                      errors.append(f"{md_file}: Missing YAML front matter")
                      continue

                  front_matter = yaml.safe_load(parts[1])

                  # Required field checks
                  for field in required_fields:
                      if field not in front_matter:
                          errors.append(f"{md_file}: Missing required field '{field}'")

                  # Date format check
                  date_str = str(front_matter.get("date", ""))
                  if not date_pattern.match(date_str):
                      errors.append(f"{md_file}: Invalid date format '{date_str}'")
                  else:
                      try:
                          post_date = datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S" if " " in date_str else "%Y-%m-%d")
                          if post_date > datetime.now() + timedelta(days=1):
                              warnings.append(f"{md_file}: Post date is more than 1 day in the future")
                      except ValueError:
                          errors.append(f"{md_file}: Unparsable date '{date_str}'")

                  # Tag validation
                  tags = front_matter.get("tags", [])
                  if not isinstance(tags, list):
                      errors.append(f"{md_file}: 'tags' must be a list")

              except Exception as e:
                  errors.append(f"{md_file}: YAML parsing error - {e}")

          if errors:
              print("❌ Preflight Check Failed:")
              for err in errors:
                  print(" -", err)
              exit(1)
          elif warnings:
              print("⚠️ Preflight Passed With Warnings:")
              for warn in warnings:
                  print(" -", warn)
          else:
              print("✅ All posts passed preflight checks!")
        shell: python
